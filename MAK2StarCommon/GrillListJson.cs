// <auto-generated />

namespace MAK2StarCommon
{
    namespace GrillList
    {
        using System;
        using System.Collections.Generic;
        using System.Linq;
        using Newtonsoft.Json;

        public sealed class GrillListEntry
        {
            [JsonProperty("CustomerId")] public Guid CustomerId { get; set; }

            [JsonProperty("GrillId")] public string GrillId { get; set; }

            [JsonProperty("Name")] public string Name { get; set; }
        }

        public sealed class GrillListJson
        {
            [JsonProperty("AggregateResults")] public object AggregateResults { get; set; }

            [JsonProperty("Data")] public List<GrillListEntry> Data { get; set; }

            [JsonProperty("Errors")] public object Errors { get; set; }

            [JsonProperty("Total")] public long Total { get; set; }
        }

        public class GrillListDiffResult
        {
            public readonly List<(GrillListEntry Before, GrillListEntry After)> Changed =
                new List<(GrillListEntry Before, GrillListEntry After)>();

            public List<GrillListEntry> Added = new List<GrillListEntry>();

            public List<GrillListEntry> Removed = new List<GrillListEntry>();


            public override string ToString()
            {
                return
                    $"Added:{this.Added.ToPrettyJsonString()}\n" +
                    $"Removed:{this.Removed.ToPrettyJsonString()}\n" +
                    $"Changed:{this.Changed.ToPrettyJsonString()}";
            }
        }

        public static class ReadOnlyJsonExtensions
        {
            public static string ToPrettyJsonString<T>(this IReadOnlyCollection<T> arg)
            {
                return JsonConvert.SerializeObject(arg, Formatting.Indented);
            }
        }

        public static class DifferenceOfGrillLists
        {
            public static GrillListDiffResult GenerateDiff(List<GrillListEntry> first,
                List<GrillListEntry> second)
            {
                var result = new GrillListDiffResult();
                var sortedFirst = first;
                var sortedSecond = second;

                if (first == null || !first.Any())
                {
                    // If the first list is empty, we've added whatever is on the second list.
                    if (second != null) result.Added = second;

                    return result;
                }

                // If the second list is empty, we've removed whatever is on the first list.
                if (!second.Any())
                {
                    result.Removed = second;
                    return result;
                }

                if (first.Count() > 1) sortedFirst = first.OrderBy(entry => entry.GrillId).ToList();

                if (second.Count() > 1) sortedSecond = second.OrderBy(entry => entry.GrillId).ToList();

                var firstIndex = 0;
                var secondIndex = 0;

                while (firstIndex < sortedFirst.Count() && secondIndex < sortedSecond.Count())
                {
                    var firstEntry = sortedFirst[firstIndex];
                    var secondEntry = sortedSecond[secondIndex];

                    var compareResult =
                        string.Compare(firstEntry.GrillId, secondEntry.GrillId, StringComparison.Ordinal);
                    if (compareResult < 0)
                    {
                        // First entry was removed in second list
                        result.Removed.Add(firstEntry);
                        ++firstIndex;
                    }
                    else if (compareResult > 0)
                    {
                        // Second entry was added to the first list
                        result.Added.Add(secondEntry);
                        ++secondIndex;
                    }
                    else
                    {
                        // They are the same
                        if (firstEntry.Name != secondEntry.Name || firstEntry.CustomerId != secondEntry.CustomerId)
                            result.Changed.Add((firstEntry, secondEntry));

                        ++firstIndex;
                        ++secondIndex;
                    }
                }

                // Anything left on the first list has been removed
                while (firstIndex < sortedFirst.Count())
                {
                    result.Removed.Add(sortedFirst[firstIndex]);
                    ++firstIndex;
                }

                // Anything left on the second list has been added
                while (secondIndex < sortedSecond.Count())
                {
                    result.Added.Add(sortedSecond[secondIndex]);
                    ++secondIndex;
                }

                return result;
            }
        }
    }
}